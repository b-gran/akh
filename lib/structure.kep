/**
 * @fileOverview Fantasy land structure definitions
 */
package (
    Applicative
    Chain
    Functor
    Monad
    Monoid
    Semigroup
    LiftInner
    Transformer)
with
    import './base' base#{liftA2}
in {

/**
 * Define applicative functor of `Instance`.
 */
Applicative = \Instance of ap -> {
    Instance.of = Instance.prototype.of = of;
    
    Instance.ap = base.ap;
    Instance.prototype.ap = ap;
    
    // Derived
    Functor(Instance,
        Instance.prototype.map || \f =m->
            of(f).ap(m));
    
    Instance.ac = liftA2 @ (@);
    Instance.prototype.ac = \m =f -> liftA2((@), f, m);
    
    return Instance;
};

/**
 * Define chainable of `Instance`.
 */
Chain = \Instance chain -> {
    Instance.chain = base.chain;
    Instance.prototype.chain = chain;
    
    return Instance;
};


/**
 * Define functor of `Instance`.
 */
Functor = \Instance map -> {
    Instance.map = base.map;
    Instance.prototype.map = map;
    
    return Instance;
};

/**
 * Define monoid of `Instance`.
 */
Monoid = \Instance zero plus -> {
    Instance.zero = Instance.prototype.zero = zero;
    
    Semigroup(Instance,
        plus);
    
    return Instance;
};

/**
 * Define monad of `Instance`.
 */
Monad = \Instance of chain -> {
    Instance.of = Instance.prototype.of = of;
    
    Chain(Instance,
        chain);
    
    // Derived
    Functor(Instance,
        Instance.prototype.map || \f =m->
            m.chain(f \> m.of));
    
    Applicative(Instance,
        of,
        Instance.prototype.ap || \m =f->
            f.chain(\f -> m.map(f)));

    return Instance;
};

/**
 * Define semigroup of `Instance`.
 */
Semigroup = \Instance plus -> {
    Instance.concat = base.concat;
    Instance.prototype.concat = plus;
    
    return Instance;
};

/**
 */
LiftInner = let 
    liftInner := \lift outer inner -> {
        if (inner.liftInner)
            outer.liftInner = liftInner(
                lift,
                (lift <\ inner.liftInner),
                inner.liftInner);
        return outer;
    }
in
    \Instance m lift -> {
        if (m.lift)
            Instance.liftInner = Instance.prototype.liftInner = liftInner(lift, (lift <\ m.lift), m);
        
        return Instance;
    };

/**
 * Define monad transformer of `Instance`.
 */
Transformer = \Instance m lift -> {
    Instance.inner = Instance.prototype.inner = m;
    
    Instance.lift = Instance.prototype.lift = lift;
    
    // Derived
    LiftInner(Instance, m, lift);

    return Instance;
};

}
