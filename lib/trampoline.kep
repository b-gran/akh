/**
 * @fileOverview Trampoline monad for tail calls.
 * 
 * Trampoline logic is based on: http://blog.higher-order.com/assets/trampolines.pdf
 */
package Trampoline
with
    import './structure' {Monad}
in {

/**
 * Trampoline monad.
 */
Trampoline = function \ -> { };

/* Classes
 ******************************************************************************/
/**
 * Completed trampoline computation.
 */
var Done = function \x =self-> {
    self.x = x;
};
Done.prototype = new Trampoline();

/**
 * Deferred trampoline computation.
 */
var Thunk = function \k x =self-> {
    self.k = k;
    self.x = x;
};
Thunk.prototype = new Trampoline();

/**
 * Chained trampoline computation.
 */
var Chain = function \c f =self-> {
    self.c = c;
    self.f = f;
    if (!(c instanceof Chain || c instanceof Thunk || c instanceof Done)) debugger;
};
Chain.prototype = new Trampoline();

/**
 * Defunctionalized trampoline chain application.
 */
var Ap = function \c f =self-> {
    self.c = c;
    self.f = f;
};

/**
 * Apply a potentially defunctionalized continuation.
 */
var appk = \f x ->
    ?f instanceof Ap
        :new Chain(f.c(x), f.f)
    :f x;


/* Definitions
 ******************************************************************************/
Monad(Trampoline,
    \x -> new Done x,
    
    \c f -> 
        ?c instanceof Chain && false
            :new Chain (c.c, \x -> c.f(x).chain(f))
            :new Chain(c, f));

Trampoline.thunk = \k x -> new Thunk (k, x);

/* Running
 ******************************************************************************/
/**
 * Run a trampolined computation to completion
 */
Trampoline.run = \cont -> {
    var k = cont;
    while (true) {
        if (k instanceof Done)
            return k.x;
        else if (k instanceof Thunk)
            k = k.k(k.x);
        else if (k instanceof Chain)
        with {c f} = k in {
            if (c instanceof Done)
                k = appk(f, c.x);
            else if (c instanceof Thunk)
                k = c.k(c.x).chain(f);
            else if (c instanceof Chain)
                k = c.c.chain(new Ap(c.f, k.f));
            //else console.log('y', c);
        } //else console.log('x');
    }
};

}