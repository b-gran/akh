/**
 * @fileOverview State monad transformer.
 * 
 * Value and state are stored in Pairs of `{x, s}`.
 * 
 * This auto wraps the real state transformer in a `Codensity` and is stack safe.
 */
package StateT
with
    import '../structure' {LiftInner},
    import '../base' {map},
    import './codensity' Codensity,
    import './statei' StateI
in {

var CodensityProxy = \Instance m -> {
    var X = Codensity Instance;
    X.lift = X.prototype.lift = X.lift <\ Instance.lift;
    X.inner = m;
    LiftInner(X, m, X.lift);
    return X;
};

/* Transformer
 ******************************************************************************/
/**
 * State monad transformer.
 * 
 * @param m Base monad.
 */
StateT := \m ->
    CodensityProxy(StateI m, m);

/* Running
 ******************************************************************************/
/**
 * Perform a stateful computation and return resulting value, state pair.
 * 
 * @param m StateT computation.
 * @param s Initial state.
 */
StateT.runStateT = \m s ->
    StateI.runStateT(
        Codensity.runCodensity(m, m.inner.of),
        s);

/**
 * Perform a stateful computation and return resulting value.
 * 
 * @param m StateT computation.
 * @param s Initial state.
 */
StateT.evalStateT = StateT.runStateT \>> map @ .x;

/**
 * Perform a stateful computation and return resulting state.
 * 
 * @param m StateT computation.
 * @param s Initial state.
 */
StateT.execStateT = StateT.runStateT \>> map @ .x;

}