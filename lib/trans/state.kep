/**
 * @fileOverview State monad transformer.
 * 
 * Value and state are stored in Pairs of `{x, s}`.
 */
package StateT
with
    import '../structure' {Monad Monoid Transformer},
    import '../trampoline' Trampoline#{run},
    import '../base' {concat chain}
in {
/**
 * Value, state pair.
 */
var Pair = \x s -> ({
    'x': x,
    's': s
});

/**
 * Run a state continuation to get the inner trampoline.
 */
var runStateT = \m s ->
    m.run(s);

/* Transformer
 ******************************************************************************/

/**
 * State monad transformer.
 * 
 * @param m Base monad.
 */
StateT = \m -> {
    var Instance = function \run =self-> {
        self.run = run;
    };

    Monad(Instance,
        \x ->
            new Instance\s ->
                Trampoline.of <|  m.of <| Pair(x, s),
        
        \c f ->
            new Instance \s ->
               Trampoline.thunk(\-> runStateT(c, s)).chain\t ->
                    Trampoline.of <| t.chain\{x s} ->
                        run <| runStateT(f x, s));
    
    Monoid(Instance,
        new Instance\_ ->
            m.zero,
        
        \a b ->
            new Instance\s ->
                Trampoline.thunk(\-> runStateT(a, s)).chain\t ->
                    runStateT(b, s).chain\k ->
                        Trampoline.of <| t.concat(k));
    
    Transformer(Instance,
        \t ->
            new Instance\s ->
                Trampoline.of <| t.chain\x -> m.of <| Pair(x, s));
    
    // State operations
    Instance.get = Instance.prototype.get =
        new Instance\s ->
            Trampoline.of <| m.of <| Pair(s, s);
    
    Instance.put = Instance.prototype.put = \s ->
        new Instance \_ ->
            Trampoline.of <| m.of <| Pair(s, s);
    
    Instance.modify = Instance.prototype.modify = \f ->
        Instance.get
            .chain(f \> Instance.put);
    
    return Instance;
};

/* Running
 ******************************************************************************/
/**
 * Perform a stateful computation and return resulting value, state pair.
 * 
 * @param m StateT computation.
 * @param s Initial state.
 */
StateT.runStateT = runStateT \>> run;

/**
 * Perform a stateful computation and return resulting value.
 * 
 * @param m StateT computation.
 * @param s Initial state.
 */
StateT.evalStateT =
    StateT.runStateT
    \>> \n ->
        n.chain\{x} -> n.of(x);

/**
 * Perform a stateful computation and return resulting state.
 * 
 * @param m StateT computation.
 * @param s Initial state.
 */
StateT.execStateT =
    StateT.runStateT
    \>> \n ->
        n.chain\{s} -> n.of(s);

}