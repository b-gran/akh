/**
 * @fileOverview State monad transformer.
 */
package StateT
with
    import '../monad' Monad
in {

/* Transformer
 ******************************************************************************/
/**
 * State monad transformer.
 * 
 * @param m Base monad.
 */
StateT = \m -> {
    var Instance = function \run =self-> {
        self.run = run;
    };
    
    // monad
    Monad(Instance,
        \x ->
            new Instance(\s ->
                m.of([x, s])),
        
        \c f ->
            new Instance(\s ->
                StateT.runStateT(c, s)
                    .chain(\[x ss] ->
                        StateT.runStateT(f(x), ss))));
    
    // State operations
    Instance.get = new Instance(\s ->
        m.of([s, s]));
    
    Instance.put = \s ->
        new Instance(\_ ->
            m.of([s, s]));
    
    // Lift
    Instance.lift = \t ->
        new Instance(\s ->
            t.chain(\x -> m.of([x, s])));
    
    return Instance;
};

/* Running
 ******************************************************************************/
/**
 * Perform a stateful computation and return resulting value, state pair.
 * 
 * @param m StateT computation.
 * @param s Initial state.
 */
StateT.runStateT = \m s ->
    m.run(s);

/**
 * Perform a stateful computation and return resulting value.
 * 
 * @param m StateT computation.
 * @param s Initial state.
 */
StateT.evalStateT = \m s ->
    let n = StateT.runStateT(m, s) in
        n.chain(\[x _] -> n.of(x));

/**
 * Perform a stateful computation and return resulting state.
 * 
 * @param m StateT computation.
 * @param s Initial state.
 */
StateT.execStateT = \m s ->
    let n = StateT.runStateT(m, s) in
        n.chain(\[_ s] -> n.of(s));

}