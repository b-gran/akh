/**
 * @fileOverview State monad transformer.
 * 
 * Value and state are stored in `Pair`s.
 */
package StateT
with
    import '../monad' Monad
in {

var Pair = \x s -> ({
    'x': x,
    's': s
});

/* Transformer
 ******************************************************************************/
/**
 * State monad transformer.
 * 
 * @param m Base monad.
 */
StateT = \m -> {
    var Instance = function \run =self-> {
        self.run = run;
    };
    
    // monad
    Monad(Instance,
        \x ->
            new Instance\s ->
                m.of(Pair(x, s)),
        
        \c f ->
            new Instance\s ->
                StateT.runStateT(c, s)
                    .chain(\{x s} ->
                        StateT.runStateT(f(x), s)));
    
    // State operations
    Instance.get = new Instance\s ->
        m.of(Pair(s, s));
    
    Instance.put = \s ->
        new Instance\_ ->
            m.of(Pair(s, s));
    
    // Lift
    Instance.lift = \t ->
        new Instance\s ->
            t.chain(\x -> m.of(Pair(x, s)));
    
    return Instance;
};

/* Running
 ******************************************************************************/
/**
 * Perform a stateful computation and return resulting value, state pair.
 * 
 * @param m StateT computation.
 * @param s Initial state.
 */
StateT.runStateT = \m s ->
    m.run(s);

/**
 * Perform a stateful computation and return resulting value.
 * 
 * @param m StateT computation.
 * @param s Initial state.
 */
StateT.evalStateT =
    StateT.runStateT
    \>> \n ->
        n.chain(\{x} -> n.of(x));

/**
 * Perform a stateful computation and return resulting state.
 * 
 * @param m StateT computation.
 * @param s Initial state.
 */
StateT.execStateT =
    StateT.runStateT
    \>> \n ->
        n.chain(\{s} -> n.of(s));

}