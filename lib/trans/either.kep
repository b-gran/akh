/**
 * @fileOverview Either monad transformer.
 */
package EitherT
with
    import '../structure' {Monad Monoid Transformer},
    import '../trampoline' Trampoline
in {

var Right = \x -> ({'right': true, 'x': x});

var Left = \x -> ({'right': false, 'x': x});

var runEitherT = \m ->
    m.run();

/* Transformer
 ******************************************************************************/
/**
 * Either monad transformer.
 * 
 * @param m Base monad.
 */
EitherT = \m -> {
    var Instance = function \run =self-> {
        self.run = run;
    };
    
    Monad(Instance,
        \x ->
            new Instance\->
                Trampoline.of <| m.of <| Right x,
        
        \c f ->
            new Instance\->
                Trampoline
                    .thunk(c.run)
                    .chain\t-> t.chain\{right x} ->
                        ?right
                            :runEitherT <| f x
                            :Trampoline.of <| m.of <| Left x);
    
    Monoid(Instance,
        new Instance\ ->
            m.of <| Left m.zero,
        
        \a b ->
            new Instance\->
                Trampoline
                    .thunk(a.run)
                    .chain\t ->
                        t.chain\{right x} ->
                            ?right
                                :m.of <| Right x
                                :runEitherT b);
    
    // Lift
    Transformer(Instance,
        \t ->
            new Instance\->
                Trampoline.of <| t.map(Right));
    
    // Either
    Instance.right = Instance.prototype.right = Instance.of;
    
    Instance.left = Instance.prototype.left = \x ->
        new Instance\->
            Trampoline.of <| m.of <| Left x;
    
    return Instance;
};

/* Running
 ******************************************************************************/
/**
 * Perform an either computation with mapping functions.
 * 
 * @param m EitherT computation.
 * @param l Left completion function that maps left value to inner monad.
 * @param r Right completion function that maps right value to inner monad.
 */
EitherT.eitherT = \m l r ->
    (Trampoline.run <| runEitherT(m))
        .chain\{right x} ->
            ?right : r x : l x;

}