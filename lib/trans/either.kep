/**
 * @fileOverview Either monad transformer.
 */
package EitherT
with
    import '../structure' {Monad Monoid Transformer},
    import '../spec/either' EitherMonad,
    import '../spec/state' StateMonad
in {

var Right := \x -> ({ right: true, value: x});

var Left := \x -> ({ left: true, value: x});

/* Transformer
 ******************************************************************************/
var runEitherT := (._run);

/**
 * Either monad transformer.
 * 
 * @param m Base monad.
 */
EitherT := \m -> {
    var Instance := function \run =self-> {
        self._run = run;
    };
    
    Monad(Instance,
        Right \> m.of \> (new, Instance),
        
        \f =c->
            new Instance ( 
                runEitherT(c).chain \ {right value} ->
                    ?right
                        :runEitherT (f value)
                        :m.of <| Left value));
    
    Monoid(Instance,
        new Instance (
            m.of <| Left m.zero),
        
        \b =a->
            new Instance (
                runEitherT(a).chain \ {right value} ->
                    ?right
                        :m.of <| Right value
                        :runEitherT b));
    
    Transformer(Instance, m,
        \t ->
            new Instance (
                t.chain(\x -> m.of <| Right x)));
    
    EitherMonad(Instance,
        Left \> m.of \> (new, Instance),
        
        Instance.of);
    
    StateMonad.tryLiftState(Instance, m);
    
    return Instance;
};

/* Running
 ******************************************************************************/
/**
 * Get an inner monad of an `Either` value.
 * 
 * @param m EitherT computation.
 */
EitherT.runEitherT = runEitherT;

/**
 * Perform an either computation with mapping functions.
 * 
 * @param m EitherT computation.
 * @param l Left completion function that maps left value to inner monad.
 * @param r Right completion function that maps right value to inner monad.
 */
EitherT.eitherT = \m l r ->
    runEitherT(m)
        .chain\{right value} ->
            ?right : r value : l value;

}