/**
 * @fileOverview Identity monad transformer.
 */
package Identity
with
    import '../structure' {Monad Monoid Transformer}
in {

/* Transform
 ******************************************************************************/
/**
 * Identity monad transformer.
 * 
 * Transforms a monad to itself.
 * 
 * One application is to define a set of custom operations on a structure
 * without effecting the underlying structure. For example, specializing a
 * `State` on state type.
 * 
 * @param m Base monad.
 */
Identity = \m -> {
    var Instance = function \x =self-> {
        self.value = x;
    };
    
    Monad(Instance,
        (new, Instance) <\ m.of,
        
        \c f ->
            new Instance (
                Identity.runIdentityT(c)
                    .chain(f \> Identity.runIdentityT)));
    
    Monoid(Instance,
        new Instance m.zero,
        
        \a b ->
            new Instance (
                Identity.runIdentityT(a)
                    .concat (Identity.runIdentityT b)));
    
    Transformer(Instance, m,
        (new, Instance));
    
    return Instance;
};

/* Running
 ******************************************************************************/
/**
 * Run an identity computation.
 */
Identity.runIdentityT = \c -> c.value;

}