/**
 * @fileOverview Delimited continuation monad transformer.
 * 
 * Based on:
 * http://www.cs.indiana.edu/~sabry/papers/monadicDC.pdf
 */
package DContT
with
    import 'nu-stream::stream' stream#{first rest isEmpty},
    
    import '../state' State,

    import '../structure' {Monad}
in {

/* Records
 ******************************************************************************/
/**
 * Control segment.
 */
var Seg = function \f =self-> {
    self.frame = f;
};

/**
 * Delimiter.
 */
var P = function \t =self-> {
    self.prompt = t;
};

/* Control Stack
 ******************************************************************************/
var empty = stream.NIL;

var push = stream.cons;

/**
 * Push an entire slice of control stack onto a control stack.
 */
var pushSeq = stream.append;

/**
 * Push a delimiter `t` on onto control stack `k`.
 */
var pushP = \t, k ->
    push(new P(t), k);

/**
 * Push a segment for `f` onto control stack `k`.
 */
var pushSeg = \f k ->
    push(new Seg(f), k);

/**
 * Splits the control stack around prompt `t`.
 */
var splitSeq = \t k -> {
    if (isEmpty k)
        return [empty, empty];
    
    var x = first k,
        xs = rest k;
    
    if (x instanceof P && x.prompt === t)
        return [empty, xs];
    
    var sub = splitSeq(t, xs);
    return [push(x, sub.(0)), sub.(1)];
};

/* Operations
 ******************************************************************************/
var unDContT = \m k ->
    m.run(k);

var runDContT = \m k ->
    State.evalState(unDContT(m, k), 1);

/**
 * Apply continuation `k`
 * 
 * @param k Continuation.
 * @param x Value
 */
var appk = \k x -> {
    var c = k;
    do {
        if (typeof c === 'function')
            return c(x);

        var top := first c;
        if (top instanceof Seg)
            return unDContT(top.frame(x), rest c);
        
        c = ?top instanceof P 
            :rest c
            :top;
    } while (true);
};

/* Prompt
 ******************************************************************************/
var createPrompt = State.get
    .chain\x ->
        State.put(x + 1)
            .chain(\-> State.of x);

/* Transformer
 ******************************************************************************/
/**
 * Delimited continuation monad transformer.
 * 
 * @param m Base monad.
 */
DContT = \m -> {
    var Instance = function \run =self-> {
        self.run = run;
    };
    
    // monad
    Monad(Instance,
        \x ->
            new Instance\k -> State.of <| appk(k, x),

        \c f ->
            new Instance\k ->
                runDContT(c, pushSeg(f, k)));
   
    // Lift
    Instance.lift = \t ->
        new Instance\k ->
            t.chain(appk).lift(k);
    
    // Primitive Continuation Operations
    /**
     * Create a new unique prompt.
     */
    var newPrompt = new Instance\k ->
        createPrompt.chain(appk @ k);
    
    /**
     * Pushes prompt onto the stack and evaluate `c`.
     * 
     * @param prompt Prompt.
     * @param c Computation.
     */
    var pushPrompt = \prompt c ->
        new Instance\k ->
            unDContT(c, pushP(prompt, k));
    
    /**
     * Capture the continuation delimited by `prompt` and call `f` with it.
     * 
     * @param prompt Prompt.
     * @param f Function mapping delimited continuation to computation.
     */
    var withSubCont = \prompt f  ->
        new Instance\k -> let
            sub = splitSeq(prompt, k)
        in
            unDContT(f(sub.(0)), sub.(1));
    
    /**
     * Push an entire sub continuation onto the stack and evaluate `c`.
     * 
     * @param subk Sub continuation.
     * @param c Computation
     */
    var pushSubCont = \subk c ->
        new Instance\k ->
            unDContT(c, pushSeq(subk, k));
    
    Instance.reset = \f->
        newPrompt.chain\p -> 
            pushPrompt(p, f(p));
    
    /**
     * Capture the continuation delimited by `p`
     * 
     * @param p Prompt.
     * @param f Function taking current delimited continuation.
     */
    Instance.shift = \p f ->
        withSubCont(p, \k ->
            pushPrompt(p, f(\c ->
                pushPrompt(p, pushSubCont(k, c)))));
        
    return Instance;
};

/* Running
 ******************************************************************************/
/**
 * Perform a continuation computation and complete with `k`.
 * 
 * @param m ContT computation.
 * @param k Outer continuation.
 */
DContT.runDContT = \m k ->
    runDContT(m, push(k, empty));

}