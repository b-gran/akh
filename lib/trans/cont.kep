/**
 * @fileOverview Continuation monad transformer.
 */
package ContT
with
    import '../monad' Monad
in {

/* Transformer
 ******************************************************************************/
/**
 * 
 */
ContT = \m -> {
    var Instance = function \run =self-> {
        self.run = run;
    };
    
    Monad(Instance,
        \x ->
            new Instance(\k -> k(x)),
        
        \c f ->
            new Instance(\k ->
                ContT.runContT(c, \x ->
                    ContT.runContT(f x, k))));
  
    // Callcc
    Instance.prototype.callcc = \f =self->
        new Instance(\k ->
            ContT.runContT(
                f(\x ->
                    new Instance(\_ -> k x)),
                k));
    
    // Lift
    Instance.lift = \t ->
        new Instance(\k ->
            t.chain(k));
    
    return Instance;
};

/* Running
 ******************************************************************************/
/**
 * Perform a continuation computation and complete with `k`.
 * 
 * @param m ContT computation.
 * @param k Outer continuation.
 */
ContT.runContT = \m k ->
    m.run(k);;

}