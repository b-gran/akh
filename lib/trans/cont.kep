/**
 * @fileOverview Continuation monad transformer.
 */
package ContT
with
    import '../structure' {Monad},
    import '../_tail' {Tail trampoline}
in {

var runContT = \m k ->
    new Tail(m.run, k);

/* Transformer
 ******************************************************************************/
/**
 * Continuation monad transformer.
 * 
 * @param m Base monad.
 */
ContT = \m -> {
    var Instance = function \run =self-> {
        self.run = run;
    };
    
    Monad(Instance,
        \x ->
            new Instance\k -> k x,
        
        \c f ->
            new Instance\k ->
                runContT(c, \x ->
                    runContT(f x, k)));
    
    // Callcc
    Instance.callcc = Instance.prototype.callcc = let
        reify = \k ->
            \x ->
                new Instance\_ -> k x
    in
        \f ->
            new Instance\k ->
                runContT(
                    f <| reify k,
                    k);
    
    // Lift
    Instance.lift = Instance.prototype.lift = \t ->
        new Instance\k ->
            t.chain(k);
    
    return Instance;
};

/* Running
 ******************************************************************************/
/**
 * Perform a continuation computation and complete with `k`.
 * 
 * @param k Outer continuation.
 * @param m ContT computation.
 */
ContT.runContT = runContT \>> trampoline;

}