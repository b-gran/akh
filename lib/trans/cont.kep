/**
 * @fileOverview Continuation monad transformer.
 */
package ContT
with
    import '../_tail' {Tail trampoline},
    import '../structure' {Monad Transformer},
    import '../spec/cont' ContMonad
in {

/* Transformer
 ******************************************************************************/
var runContT := \m k ->
    new Tail(m.run, k);

/**
 * Continuation monad transformer.
 * 
 * @param m Base monad.
 */
ContT := \m -> {
    var Instance := function \run =self-> {
        self.run = run;
    };
    
    Monad(Instance,
        \x ->
            new Instance\k -> k x,
        
        \f =c->
            new Instance\k ->
                runContT(c, \x ->
                    runContT(f x, k)));
    
    Transformer(Instance, m,
        \t ->
            new Instance\k ->
                t.chain(k \> trampoline));
    
    ContMonad(Instance,
        let
            reify = \k ->
                \x ->
                    new Instance\_ -> k x
        in
            \f ->
                new Instance\k ->
                    runContT(
                        f <| reify k,
                        k));
    
    return Instance;
};

/* Running
 ******************************************************************************/
/**
 * Perform a continuation computation and complete with `k`.
 * 
 * @param m ContT computation.
 * @param k Outer continuation.
 */
ContT.runContT = runContT \>> trampoline;

}