/**
 * @fileOverview Error monad transformer.
 */
package ErrorT
with
    import '../structure' {Monad Monoid},
    import '../spec/error' ErrorMonad,
    import '../spec/state' StateMonad,

    import './either' EitherT#{eitherT}
in {

/* Transformer
 ******************************************************************************/
/**
 * Error monad transformer.
 * 
 * @param m Base monad.
 */
ErrorT := \m -> {
    var Instance = EitherT(m);
    
    ErrorMonad(Instance,
        Instance.left,
        
        \e =c->
            ErrorT.runErrorT(c, c.of, e));
    
    StateMonad.tryLiftState(Instance, m);
    
    return Instance;
};

/* Running
 ******************************************************************************/
/**
 * Perform an error computation with mapping functions.
 * 
 * @param m ErrorT computation.
 * @param ok Success completion function that maps left value to inner monad.
 * @param err Failure completion function that maps right value to inner monad.
 */
ErrorT.runErrorT = \m ok err ->
    eitherT(m, err, ok);

}