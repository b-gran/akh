/**
 * @fileOverview Error monad transformer.
 */
package ErrorT
with
    import '../structure' {Monad Monoid},
    import './either' EitherT#{eitherT}
in {

/* Transformer
 ******************************************************************************/
/**
 * Error monad transformer.
 * 
 * @param m Base monad.
 */
ErrorT = \m -> {
    var Instance = EitherT(m);
    
    // Error
    Instance.fail = Instance.prototype.fail = Instance.left;
    
    Instance.handle = \m e ->
        ErrorT.runErrorT(m, m.of, e);
    
    Instance.prototype.handle= \e =m-> Instance.handle(m, e);;
    
    return Instance;
};

/* Running
 ******************************************************************************/
/**
 * Perform an error computation with mapping functions.
 * 
 * @param m ErrorT computation.
 * @param ok Success completion function that maps left value to inner monad.
 * @param err Failure completion function that maps right value to inner monad.
 */
ErrorT.runErrorT = \m ok err ->
    eitherT(m, err, ok);

}