/**
 * @fileOverview List monad transformer.
 * 
 * This uses Javascript arrays.
 */
package ListT
with
    import '../base' {liftM liftM2},
    import '../structure' {Functor Monoid Monad Transformer}
in {

var foldr := \f z a -> Array.prototype.reduceRight.call(a, f, z);

var map := \f a -> Array.prototype.map.call(a, f);

var concat := Function.prototype.call.bind(Array.prototype.concat);

var flatten := Function.prototype.apply.bind(Array.prototype.concat, []);

var flip := \f -> \x y -> f(y, x);

var flattenM := liftM @ flatten;

/* Transformer
 ******************************************************************************/
/**
 * List monad transformer.
 * 
 * @param m Base monad.
 */
ListT = \m -> {
    var Instance = function \run =self-> {
        self.run = run;
    };

    var sequence := foldr @ (liftM2 @ (flip concat), m.of []);
    
    var mapM := map \>> sequence;
    
    Monoid(Instance,
        new Instance (
            m.of []),
        
        \b =a->
            new Instance (
                liftM2(concat, ListT.runListT(a), ListT.runListT(b))));
    
    Monad(Instance,
        \x ->
            new Instance (
                m.of [x]),
        
        \f =c->
            new Instance (
                ListT.runListT(c)
                    .chain(mapM @ (f \> ListT.runListT))
                    |> flattenM));
    
    Transformer(Instance, m,
        \t ->
            new Instance (
                liftM(\x -> [x], t)));
    
    return Instance;
};

/* Running
 ******************************************************************************/
/**
 * Perform a list computation.
 * 
 * @param m ListT computation.
 */
ListT.runListT = \m ->
    m.run;

}