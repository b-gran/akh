/**
 * @fileOverview List monad transformer.
 * 
 * This uses Javascript arrays.
 */
package ListT
with
    import '../base' {liftM liftM2},
    import '../structure' {Monoid Monad}
in {

var foldr := \f z a -> Array.prototype.reduceRight.call(a, f, z);

var map := \f a -> Array.prototype.map.call(a, f);

var concat := Function.prototype.call.bind(Array.prototype.concat);

var flatten := Function.prototype.apply.bind(Array.prototype.concat, []);

var flip := \f -> \x y -> f(y, x);

var cons := \x xs -> [x].concat(xs);

var flattenM := liftM @ flatten;

/* Transformer
 ******************************************************************************/
/**
 * State monad transformer.
 * 
 * @param m Base monad.
 */
ListT = \m -> {
    var Instance = function \run =self-> {
        self.run = run;
    };
    
    var sequence := foldr @ (liftM2 @ (flip concat), m.of []);
    
    var mapM := map \>> sequence;
    
    // Monoid
    Monoid(Instance,
        new Instance\->
            m.of [],
        
        \a b ->
            new Instance\->
                liftM2(concat, ListT.runListT(a), ListT.runListT(b)));
    
    // Monad
    Monad(Instance,
        \x ->
            new Instance\->
                m.of [x],
        
        \c f ->
            new Instance\->
                ListT.runListT(c)
                    .chain(mapM @ (f \> ListT.runListT))
                    |> flattenM);
    
    // Lift
    Instance.lift = \t ->
        new Instance\->
            liftM(\x -> [x], t);
    
    return Instance;
};

/* Running
 ******************************************************************************/
/**
 * Perform a stateful computation and return resulting value, state pair.
 * 
 * @param m ListT computation.
 * @param s Initial state.
 */
ListT.runListT = \m s ->
    m.run(s);

}