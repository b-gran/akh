package (
    chain
    map
    ap
    concat
    
    liftM
    liftM2
    
    liftA
    liftA2
    
    compose
    composer
    
    next
    sequencea
    sequence)
{

var constant := \x -> \ -> x;

var flip := \f -> \x y -> f(y, x);

/* Generic versions of ops
 ******************************************************************************/
/**
 * Chain `f` onto monad `c`, getting monad type from `m`.
 */
chain := \m f -> m.chain(f);

/**
 * Map `f` over functor `m`, getting functor type from `m`.
 */
map := \f m -> m.map(f);

/**
 * Apply applicative `f` over `a`, getting applicative type from `f`.
 */
ap := \f a -> f.ap(a);

/**
 * Concat Semigroups `a` and `b`, getting type from `a`.
 */
concat := \a b -> a.concat(b);

/* Monad Lifting
 ******************************************************************************/
/**
 * Lift unary function `f` to a monad, getting arguments from a monadic value.
 */
liftM := map;

/**
 * Lift binary function `f` to a monad, getting arguments from monadic values.
 */
liftM2 := \f m1 m2 ->
    m1.chain \ x ->
    m2.map   \ y ->
        f(x, y);

/* Applicative Lifting
 ******************************************************************************/
/**
 * Lift unary function `f` to an applicative, getting argument from applicative value.
 */
liftA := \f a -> a.of(f).ap(a);

/**
 * Lift binary function `f` to an applicative, getting arguments from applicative values.
 */
liftA2 := \f a1 a2 ->
    a1.of(\x -> \y -> f(x, y))
        .ap(a1)
        .ap(a2);

/* Composition
 ******************************************************************************/
/**
 * Left-to-right Kleisli composition.
 */
compose := \f g ->
    \x ->
        f(x).chain(g);

/**
 * right-to-right Kleisli composition.
 */
composer := flip compose;

/* Monad Sequencing
 ******************************************************************************/
/**
 * Perform `p` then `q`. Return result from `q`.
 */
next := \p q -> p.chain(constant q);

/**
 * Perform a sequence of computations left to right.
 * 
 * @param arr Array of computations.
 */
sequencea := \arr -> Array.prototype.reduce.call(arr, next);

/**
 * Perform a sequence of computations from arguments left to right.
 */
sequence := \args(...) -> sequencea(args);

}