package (
    liftM
    liftM2
    
    next
    sequencea
    sequence
    mapM
    foldM)
{

var flip := \f -> \x y -> f(y, x);

var reducer := \f a -> Array.prototype.reduceRight.call(a, f);

var foldr := \f z a -> Array.prototype.reduceRight.call(a, f, z);

var map := \f a -> Array.prototype.map.call(a, f);

var concat := Function.prototype.call.bind(Array.prototype.concat);

var flatten := Function.prototype.apply.bind(Array.prototype.concat, []);


var cons := \x xs -> [x].concat(xs);


/* Lifting
 ******************************************************************************/
liftM = \f m ->
    m.chain(f \> m.of);

liftM2 = \f m1 m2 ->
    m1.chain \ x ->
    m2.chain \ y ->
    m1.of(f(x, y));

/* Lifting
 ******************************************************************************/
/**
 * Perform `p` then `q`. Return result from `q`.
 */
next = \p q -> p.chain(\_ -> q);

/**
 * Perform a sequence of computations left to right.
 * 
 * @param arr Array of computations.
 */
sequencea = \arr -> Array.prototype.reduce.call(arr, next);

/**
 * Perform a sequence of computations from arguments left to right.
 */
sequence = \args(...) -> sequencea(args);

}