/**
 * @fileOverview Error computation
 */
package Error
with
    import 'akh.identity' {Identity},
    import './trans/error' ErrorT#{runErrorT}
in {

var id := \x -> x;

var constant := \x -> \ -> x;

/* Structure
 ******************************************************************************/
Error := ErrorT(Identity);

/* Running
 ******************************************************************************/
/**
 * Perform a error computation.
 * 
 * @param m Error computation.
 * @param ok Success result completion.
 * @param err Failure result completion.
 */
Error.runError =
    (\m ok err ->
        runErrorT(m,
            ok \> Identity.of,
            err \> Identity.of))
    \>> Identity.runIdentity;

/**
 * Perform a error computation with error handler.
 * 
 * @param m Error computation.
 * @param e Error handler that maps error value to result.
 */
Error.tryError = \m e ->
    Error.runError(m, id, e);

/**
 * Perform a error computation and if it fails, return a default value.
 * 
 * @param m Error computation.
 * @param def Value returned on error
 */
Error.attemptError = \m def ->
    Error.tryError(m, constant def);

}